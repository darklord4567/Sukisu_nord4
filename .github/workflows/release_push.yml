# .github/workflows/release-kernel.yml

name: Create Kernel Release

on:
  workflow_dispatch:
    inputs:
      run_url:
        description: 'Paste the full URL of the successful build run'
        required: true
      device_name:
        description: 'Device name for the release (e.g., oneplus_nord_4_v)'
        required: true
        default: 'oneplus_nord_4_v'

jobs:
  release:
    name: Create Release
    runs-on: ubuntu-latest
    permissions:
      contents: write
      actions: read
    env:
      TZ: Asia/Kolkata
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # Make token available to all steps

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Extract Run ID from URL
        run: |
          RUN_ID=$(basename "${{ inputs.run_url }}")
          echo "Extracted Run ID: $RUN_ID"
          echo "RUN_ID=$RUN_ID" >> $GITHUB_ENV

      - name: Generate IST Release Tag
        run: |
          TAG="${{ inputs.device_name}}-$(date +'%Y-%m-%d_%H-%M')-IST"
          echo "Generated Tag: $TAG"
          echo "tag=$TAG" >> $GITHUB_ENV

      # ==> This new step downloads the artifacts directly as zip files <==
      - name: Download Artifact Zips Directly via API
        run: |
          mkdir ./final-zips

          # Get the name and download URL for each artifact in the specified run
          ARTIFACTS_DATA=$(gh api "repos/${{ github.repository }}/actions/runs/${{ env.RUN_ID }}/artifacts" --jq '.artifacts')

          # Check if any artifacts were found
          if [ "$(echo "$ARTIFACTS_DATA" | jq 'length')" -eq 0 ]; then
            echo "::error::No artifacts found for Run ID ${{ env.RUN_ID }}"
            exit 1
          fi
          
          echo "Found artifacts to download:"
          echo "$ARTIFACTS_DATA" | jq -r '.[].name'

          # Loop through each artifact, download it, and save it with a .zip extension
          echo "$ARTIFACTS_DATA" | jq -c '.[]' | while read -r artifact_json; do
            ARTIFACT_NAME=$(echo "$artifact_json" | jq -r '.name')
            DOWNLOAD_URL=$(echo "$artifact_json" | jq -r '.archive_download_url')
            
            echo "--- Downloading ${ARTIFACT_NAME}.zip ---"
            curl -L -H "Authorization: Bearer $GITHUB_TOKEN" -o "./final-zips/${ARTIFACT_NAME}.zip" "$DOWNLOAD_URL"
          done

      - name: Display Final Zip Files
        run: ls -l ./final-zips

      - name: Create GitHub Release and Upload Zips
        env:
          RELEASE_NOTES: |
            ### SukiSU Ultra Kernel for ${{ inputs.device_name }}
            Flash the appropriate zip file below using a custom recovery.
            
            **Flasher Recommendation:**
            -> [Kernel Flasher](https://github.com/fatalcoder524/KernelFlasher)

            **Manager App:**
            -> [SukiSU-Ultra Manager](https://github.com/SukiSU-Ultra/SukiSU-Ultra/releases/latest)
        run: |
          # The wildcard finds all .zip files in the 'final-zips' directory
          gh release create "${{ env.tag }}" \
            --title "Kernel Release for ${{ inputs.device_name }} - $(date +'%d %B %Y, %I:%M %p IST')" \
            --notes "$RELEASE_NOTES" \
            ./final-zips/*.zip
