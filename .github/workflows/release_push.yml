# .github/workflows/release-kernel.yml

name: Create Kernel Release

on:
  workflow_dispatch:
    inputs:
      run_id:
        description: 'The ID of the successful build run to release from'
        required: true
      device_name:
        description: 'Device name for the release (e.g., oneplus_nord_4_v)'
        required: true
        default: 'oneplus_nord_4_v'

jobs:
  release:
    name: Create Release
    runs-on: ubuntu-latest
    permissions:
      contents: write
      actions: read
    env:
      TZ: Asia/Kolkata

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Download Build Artifacts
        uses: dawidd6/action-download-artifact@v6
        with:
          workflow: build-kernel.yml
          run_id: ${{ inputs.run_id }}
          github_token: ${{ secrets.GITHUB_TOKEN }}
          path: ./release-artifacts

      - name: Display Downloaded Files
        run: ls -R ./release-artifacts

      - name: Generate IST Release Tag
        run: |
          TAG="${{ inputs.device_name }}-$(date +'%Y%m%d-%H%M')-IST"
          echo "Generated Tag: $TAG"
          echo "tag=$TAG" >> $GITHUB_ENV

      # ==> THIS IS THE FINAL, CORRECTED SCRIPT <==
      - name: Create Release and Upload Assets
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          RELEASE_NOTES: |
            ### SukiSU Ultra Kernel for ${{ inputs.device_name }}

            **Flasher Recommendation:**
            -> [Kernel Flasher](https://github.com/fatalcoder524/KernelFlasher)

            **Manager App:**
            -> [SukiSU-Ultra Manager](https://github.com/SukiSU-Ultra/SukiSU-Ultra/releases/latest)
        run: |
          # 1. Create the release first
          gh release create "${{ env.tag }}" \
            --title "Kernel Release for ${{ inputs.device_name }} - $(date +'%d %B %Y, %I:%M %p IST')" \
            --notes "$RELEASE_NOTES"

          # 2. Prepare a list of all files, creating a guaranteed unique name for each one
          UPLOAD_ARGS=()
          while IFS= read -r file; do
              # Get the path of the file relative to the 'release-artifacts' directory
              # e.g., AnyKernel3_.../tools/busybox
              relative_path=$(echo "$file" | sed 's|^\./release-artifacts/||')
              
              # Replace all slashes with hyphens to create a unique filename
              # e.g., AnyKernel3_...-tools-busybox
              remote_name=$(echo "$relative_path" | tr '/' '-')
              
              UPLOAD_ARGS+=("$file#${remote_name}")
          done < <(find ./release-artifacts -type f)

          # 3. Upload all the prepared assets
          if [ ${#UPLOAD_ARGS[@]} -eq 0 ]; then
            echo "No files found in artifacts to upload."
          else
            echo "Uploading the following assets:"
            printf " - %s\n" "${UPLOAD_ARGS[@]}"
            gh release upload "${{ env.tag }}" "${UPLOAD_ARGS[@]}"
          fi
