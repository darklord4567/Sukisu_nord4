# .github/workflows/release-kernel.yml

name: Create Kernel Release

on:
  workflow_dispatch:
    inputs:
      run_url:
        description: 'Paste the full URL of the successful build run'
        required: true
      device_name:
        description: 'Device name for the release (e.g., oneplus_nord_4_v)'
        required: true
        default: 'oneplus_nord_4_v'

jobs:
  release:
    name: Create Release
    runs-on: ubuntu-latest
    permissions:
      contents: write
      actions: read
    env:
      TZ: Asia/Kolkata
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Extract Run ID from URL
        run: |
          RUN_ID=$(basename "${{ inputs.run_url }}")
          echo "Extracted Run ID: $RUN_ID"
          echo "RUN_ID=$RUN_ID" >> $GITHUB_ENV

      # ==> REPLACED the download action with this more direct CLI command <==
      - name: Download Artifacts via GitHub CLI
        run: |
          echo "Downloading artifacts for Run ID ${{ env.RUN_ID }}..."
          gh run download ${{ env.RUN_ID }} --dir ./downloaded-artifacts --repo ${{ github.repository }}

      - name: Display Downloaded Artifact Structure
        run: ls -R ./downloaded-artifacts

      - name: Zip Each Artifact Individually
        run: |
          mkdir ./final-zips
          for dir in ./downloaded-artifacts/*; do
            if [ -d "$dir" ]; then
              ARTIFACT_NAME=$(basename "$dir")
              echo "Zipping artifact: $ARTIFACT_NAME"
              (cd "$dir" && zip -r9 "$GITHUB_WORKSPACE/final-zips/${ARTIFACT_NAME}.zip" .)
            fi
          done

      - name: Display Final Zip Files
        run: ls -l ./final-zips
      
      - name: Generate IST Release Tag
        run: |
          TAG="${{ inputs.device_name}}-$(date +'%Y-%m-%d_%H-%M')-IST"
          echo "Generated Tag: $TAG"
          echo "tag=$TAG" >> $GITHUB_ENV

      - name: Create GitHub Release and Upload Zips
        env:
          RELEASE_NOTES: |
            ### SukiSU Ultra Kernel for ${{ inputs.device_name }}
            Flash the appropriate zip file below using a custom recovery.
            
            **Flasher Recommendation:**
            -> [Kernel Flasher](https://github.com/fatalcoder524/KernelFlasher)

            **Manager App:**
            -> [SukiSU-Ultra Manager](https://github.com/SukiSU-Ultra/SukiSU-Ultra/releases/latest)
        run: |
          gh release create "${{ env.tag }}" \
            --title "Kernel Release for ${{ inputs.device_name }} - $(date +'%d %B %Y, %I:%M %p IST')" \
            --notes "$RELEASE_NOTES" \
            ./final-zips/*.zip
